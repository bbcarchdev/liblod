'\" t
.\"     Title: liblod
.\"    Author: Mo McRoberts
.\" Generator: DocBook XSL-NS Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 05/02/2014
.\"    Manual: Library functions
.\"    Source: Linked Open Data client
.\"  Language: English
.\"
.TH "LIBLOD" "3" "05/02/2014" "Linked Open Data client" "Library functions"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
liblod \- Linked Open Data client library
.SH "SYNOPSIS"
.HP \w'\fBcc\fR\ 'u
\fBcc\fR [\fB\fIflag\fR\fR] \fIfile\ \&...\fR \-llod [\fB\fIlibrary\ \&...\fR\fR]
.sp
.ft B
.nf
#include <liblod\&.h>
.fi
.ft
.SH "DESCRIPTION"
.PP
Linked Open Data is a method of publishing machine\-readable structured data on the web, using resolveable URIs as the means of identifying the entities described and referred to by the data\&.
.PP

liblod
is a library for consuming published Linked Open Data, providing a simple interface for resolving a URI and interrogating the data which is retrieved\&.
.SH "INTERFACES"
.PP

liblod
provides the public interfaces listed below\&.
.\" line length increase to cope w/ tbl weirdness
.ll +(\n(LLu * 62u / 100u)
.TS
ll.
\fIFunction\fR	\fIDescription\fR
T{
\m[blue]\fB\fBlod_create\fR\fR\m[]
T}	T{
Create a new context
T}
T{
\m[blue]\fB\fBlod_resolve\fR\fR\m[]
T}	T{
Attempt to resolve a Linked Open Data URI
T}
T{
\m[blue]\fB\fBlod_locate\fR\fR\m[]
T}	T{
Locate triples about a subject already present in a context\*(Aqs model
T}
T{
\m[blue]\fB\fBlod_fetch\fR\fR\m[]
T}	T{
Resolve a Linked Open Data URI, fetching the data irrespective of whether the subject exists in the context\*(Aqs model
T}
T{
\m[blue]\fB\fBlod_destroy\fR\fR\m[]
T}	T{
Destroy a previously\-created context
T}
T{
\m[blue]\fB\fBlod_world\fR\fR\m[]
T}	T{
Obtain the librdf world used by a context
T}
T{
lod_set_world
T}	T{
Set the librdf world used by a context
T}
T{
\m[blue]\fB\fBlod_storage\fR\fR\m[]
T}	T{
Obtain the librdf storage used by a context
T}
T{
lod_set_storage
T}	T{
Set the librdf storage used by a context
T}
T{
\m[blue]\fB\fBlod_model\fR\fR\m[]
T}	T{
Obtain the librdf model used by a context
T}
T{
lod_set_model
T}	T{
Set the librdf model used by a context
T}
T{
\m[blue]\fB\fBlod_curl\fR\fR\m[]
T}	T{
Obtain the libcurl handle used by a context
T}
T{
lod_set_curl
T}	T{
Set the libcurl handle used by a context
T}
T{
lod_subject
T}	T{
Retrieve the most recently\-resolved subject URI
T}
T{
lod_document
T}	T{
Retrieve the URL of the most recently parsed document
T}
T{
lod_status
T}	T{
Obtain the HTTP status of the most recent request
T}
T{
\m[blue]\fB\fBlod_error\fR\fR\m[]
T}	T{
Determine whether an error has occurred
T}
T{
\m[blue]\fB\fBlod_errmsg\fR\fR\m[]
T}	T{
Obtain a description of a context\*(Aqs error condition
T}
T{
lod_librdf_logger
T}	T{
Default logging function for librdf world objects\&.
T}
T{
lod_useragent
T}	T{
Obtain the User\-Agent HTTP header string for a context
T}
T{
lod_accept
T}	T{
Obtain the Accept HTTP header string for a context
T}
T{
\m[blue]\fB\fBlod_instance_destroy\fR\fR\m[]
T}	T{
Free resources allocated to an instance
T}
T{
\m[blue]\fB\fBlod_instance_stream\fR\fR\m[]
T}	T{
Obtain a librdf stream for an instance
T}
T{
\m[blue]\fB\fBlod_instance_uri\fR\fR\m[]
T}	T{
Obtain a librdf URI for an instance
T}
T{
\m[blue]\fB\fBlod_instance_exists\fR\fR\m[]
T}	T{
Determine whether the subject of an instance exists within the context\*(Aqs model
T}
T{
\m[blue]\fB\fBlod_instance_primarytopic\fR\fR\m[]
T}	T{
Attempt to follow a foaf:primaryTopic relationship
T}
.TE
.\" line length decrease back to previous value
.ll -(\n(LLu * 62u / 100u)
.sp
.SH "DEPENDENCIES"
.PP

liblod
depends upon
libcurl,
librdf,
libxml2
and
liburi\&.
.PP
A copy of
liburi
is included in the source distribution\&.
.SH "SEE ALSO"
.PP

\m[blue]\fB\fBlibcurl\fR(3)\fR\m[],
\m[blue]\fB\fBlibrdf\fR(3)\fR\m[],
\m[blue]\fB\fBlibxml2\fR(3)\fR\m[]\&.
