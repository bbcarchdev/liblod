'\" t
.\"     Title: lod_resolve
.\"    Author: Mo McRoberts
.\" Generator: DocBook XSL-NS Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 07/07/2015
.\"    Manual: Library functions
.\"    Source: Linked Open Data client
.\"  Language: English
.\"
.TH "LOD_RESOLVE" "3" "07/07/2015" "Linked Open Data client" "Library functions"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
lod_resolve \- Resolve a Linked Open Data URI
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <liblod\&.h>
.fi
.ft
.HP \w'LODINSTANCE\ *lod_resolve('u
.BI "LODINSTANCE *lod_resolve(LODCONTEXT\ *" "context" ", const\ char\ *" "uri" ");"
.SH "DESCRIPTION"
.PP

\fBlod_resolve\fR
attempts to
resolve
a Linked Open Data URI: that is, perform one or more HTTP requests in order to obtain data describing the subject identified by
\fIuri\fR\&.
.PP
In contrast to
\fBlod_fetch\fR
(which will attempt a network fetch regardless of the existing contents of the context\(cqs model), and
\fBlod_locate\fR
(which will never attempt a network fetch), the behaviour of
\fBlod_resolve\fR
is conditional depending upon whether
\fIuri\fR
is the subject of a triple within the context\(cqs model\&.
.PP
If such a triple is present,
\fBlod_resolve\fR
behaves as
\fBlod_locate\fR, returning an instance whose subject is
\fIuri\fR\&.
.PP
If no such triple could be found,
\fBlod_resolve\fR
behaves as though
\fBlod_fetch\fR
had been called instead\&.
.SH "RETURN VALUE"
.PP
Upon success,
\fBlod_resolve\fR
returns a new
\fBLODINSTANCE\fR, which should be later freed using
\fBlod_instance_destroy\fR\&.
.PP
If an error occurs, or
\fIuri\fR
was not a subject of any triple in the data after the fetch completes,
\fBlod_resolve\fR
returns
\fBNULL\fR\&.
.PP
Use
\fBlod_error\fR
to determine whether an error occurred, or whether the subject does not exist in the data\&. If an error does occur, you can use
\fBlod_errmsg\fR
to obtain a description of the error condition\&.
.SH "EXAMPLE"
.sp
.if n \{\
.RS 4
.\}
.nf
LODCONTEXT *ctx;
LODINSTANCE *inst;

ctx = lod_create();
inst = lod_resolve(ctx, "http://www\&.dbpedialite\&.org/things/22308#id");
if(!inst)
{
	if(lod_error(ctx))
	{
		/* An error occurred */
	}
	else
	{
		/* No error, but the subject wasn\*(Aqt present */
	}
}
else
{
	/* Triples found */
	lod_instance_destroy(inst);
}
lod_destroy(ctx);
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP

\m[blue]\fB\fBliblod\fR(3)\fR\m[],
\m[blue]\fB\fBlod_create\fR(3)\fR\m[],
\m[blue]\fB\fBlod_error\fR(3)\fR\m[],
\m[blue]\fB\fBlod_errmsg\fR(3)\fR\m[],
\m[blue]\fB\fBlod_locate\fR(3)\fR\m[],
\m[blue]\fB\fBlod_fetch\fR(3)\fR\m[],
\m[blue]\fB\fBlod_instance_destroy\fR(3)\fR\m[],
\m[blue]\fB\fBlod_instance_stream\fR(3)\fR\m[],
\m[blue]\fB\fBlibrdf_parser_create\fR(3)\fR\m[]\&.
